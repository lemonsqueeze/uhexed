#!/usr/bin/perl
# uhexed
# unicode hex editor
# http://github.com/lemonsqueeze/uhexed

use Encode qw(decode encode);
use List::Util qw(max min);
use HotKey;

# Default encoding
my $encoding = "utf-8";
#my $encoding = "cp932";   # Windows codepage 932 - Japanese Shift-JIS
#my $encoding = "utf-16le";
#my $encoding = "ascii";

# Redraw method
#my $paint = "dumb";       # debugging
my $paint = "term";

if ($ARGV[0] eq "-h")
{ 
    print "Usage: uhexed [-e encoding] binary_file\n";
    print "\n";
    print "Simple multi-byte hex editor\n";
    print "Press 'h' for help with keys\n";
    exit 1;
}


if ($ARGV[0] eq "-e")
{  shift @ARGV; $encoding = $ARGV[0]; shift @ARGV; }
my $encoding_last = $encoding;


######################################################################

# Enable unicode input for search ?
my $search_mode = "unicode";

# Terminal stuff
my $tcols = `tput cols`;
my $tlines = `tput lines`;
my $blank = join("", map { " " } (1..$tcols) );
my $bl = $blank . "\n";		# blank line
my $clear_screen = 0;
my $matrix_mode = 0;

my $bold =   "\e[40;37;1m";
my $blue =   "\e[40;34m";
my $bblue =   "\e[40;34;1m";
my $cyan =   "\e[40;36m";
my $bcyan =   "\e[40;36;1m";
my $purple = "\e[40;35m";
my $yellow = "\e[40;33m";
my $byellow = "\e[40;33;1m";
my $red =    "\e[40;31m";
my $green =  "\e[40;32m";
my $bgreen =  "\e[40;32;1m";
my $normal = "\e[40;37m";
my $end  =   "\e[0m";
my $inv_video = "\e[7m";
my $cls = "\e[2J";
my $cursor_top = "\e[0;0H";	# ESC[y;xH  move cursor to row y, col x
my $hide_cursor = "\e[?25l";
my $show_cursor = "\e[?25h";


binmode STDOUT, ":utf8";
my $file = $ARGV[0];

# TODO read-only mode
open(FILE, "+<", $file) || die "couldn't open $file";


# Buffer size
my $bsize = 8192;
my $bytes = "";
my $top = 0;
my $cur = 0;

my $status = "";

seek(FILE, 0, 2);
my $file_size = tell(FILE);

sub read_file
{
    sysseek(FILE, $top, 0);
    $bytes = "";
    my $r = sysread(FILE, $bytes, $bsize);
    $clear_screen = 1;
    return ($r != 0);
}

sub write_file
{
    sysseek(FILE, $top, 0);
    my $r = syswrite(FILE, $bytes, $bsize);
    return ($r == $bsize);
}

sub to_ascii
{
    my ($c) = @_;
    if (ord($c) >= 32 && ord($c) <= 126)
    {  return $c; }
    return ".";
}

sub to_multibyte
{
    my ($s) = @_;
    $s = Encode::decode($encoding, $s );    
    # Remove control characters
    $s =~ s/\p{C}/./g;    # \p{C} more generic than \p{Control} 
    return $s;
}

# Dumb and slow but should handle pretty much any encoding
sub split_multibyte
{
    my ($line) = @_;    
    my $split = $cur - ($top + $line);
    my $len = 1;

    my $s = to_multibyte(substr($bytes, $line, $width));    
    my ($s1, $s2, $s3);    
    
    while ($len < 5)  # Find character beginning ...
    {    
	$s1 = to_multibyte(substr($bytes, $line, $split));
	if (index($s, $s1) != 0)	# Bad offset
	{ $split--; $len++; next;  }

	$sn = to_multibyte(substr($bytes, $line, $split - 1));
	if (length($s1) == length($sn)) # Eating up something ?
	{ $split--; $len++; next;  }
	last;
    }
    
    while ($len < 5)		# Length now ...
    {
	my $off = $line + $split;
	$s2 = to_multibyte(substr($bytes, $off, $len));          $off += $len;    
	$s3 = to_multibyte(substr($bytes, $off, max($width - $len - $split, 0)));
	if ("$s1$s2$s3" ne $s)	{  $len++; next;  }
	last;
    }
    return ($s1, $s2, $s3);
}

sub print_chars_multibyte
{
    my ($i, $col) = @_;

    # ascii/multi-byte characters
    my $line = $i * $width;
    if ($top + $line <= $cur && $cur < $top + $line + $width)	# Highlight character at cursor
    {
	my ($s1, $s2, $s3) = split_multibyte($line);
	print "$s1$inv_video$s2$end$col$s3";
	
	if ($matrix_mode)
	{
	    my $n = length(to_multibyte(substr($bytes, $line, $width)));
	    for (my $i = 0; $i < $n; $i++)
	    { my $highlight = (rand(5) < 1); }
	}
	return;
    }
    
    if (!$matrix_mode)
    {   print to_multibyte(substr($bytes, $line, $width));  }
    else
    {
	my $s = to_multibyte(substr($bytes, $line, $width));
	my @t = split("", $s);
	for (my $i = 0; $i < @t; $i++)
	{  
	    if (rand(5) < 1)  { print "$bgreen$t[$i]$end$green"; }
	    else	          { print $t[$i]; }
	}
    }
}

sub print_chars_ascii
{
    my ($i, $col) = @_;
    
    for (my $j = 0; $j < $width; $j++)
    {
	my $p = $i*$width + $j;
	my $highlight = $matrix_mode && (rand(5) < 1);
	if ($highlight)  { print "$bgreen"; }
	print "$inv_video" if ($top + $p == $cur);
	print to_ascii(substr($bytes, $p, 1));
	print "$end$col" if ($top + $p == $cur);
	if ($highlight)  { print "$end$col"; }
    }    
}

sub clear_line
{
    print "\r$blank\r";  STDOUT->flush();
}

$width = 28;
$lines = 25;
sub print_page
{    
    if ($paint eq "term")
    {	print "$cursor_top$hide_cursor";   }

    # Status line
    clear_line();
    printf("${green}%s", ($status ne "" ? $status : "\n"));
    $status = "";

    print "$bl$bl$bl$bl";

    clear_line();
    printf("${bgreen}0x%08x  %-7s %*s($encoding)${end}\n", $cur, sprintf("(%i%%)", $top * 100 / $file_size), 
	   $width * 2 + $width / 4 - 4, "");

    if ($matrix_mode) {  srand($top);  }
    
    for (my $i = 0; $i < $lines; $i++)
    {
	if ($clear_screen) { clear_line(); }
	my $current_line = ($top + $i*$width <= $cur && $cur < $top + ($i+1)*$width ? 1 : 0);
	my $col = ($current_line ? $bgreen : $green);
	printf("${col}0x%08x  ", $top + $i*$width);

	# Regular hex dump
	for (my $j = 0; $j < $width; $j++)
	{
	    my $p = $i*$width + $j;
	    my $highlight = $matrix_mode && (rand(5) < 1) && !$current_line;
	    if ($highlight)  { print "$bgreen"; }
	    print("$inv_video") if ($top + $p == $cur);
	    printf("%02x", ord(substr($bytes, $p, 1)) );
	    print("$end$col") if ($top + $p == $cur);
	    if ($highlight)  { print "$end$col"; }
	    print(" ") if (($j+1) % 4 == 0);
	}

	printf("    ");
	if ($encoding eq "ascii")
	{   print_chars_ascii($i, $col);  }
	else
	{   print_chars_multibyte($i, $col);    }
	
	print("$end  \n");
    }

    print "$show_cursor$bl";
    $clear_screen = 0;
}

sub read_line_unicode
{
    my ($prompt) = @_;
    print "$bgreen$prompt";  STDOUT->flush();
    my $s = "";
    while (1)
    {
	my $key = readkey();
	if ($key eq "\n")
	{  print "$end"; clear_line(); return Encode::decode("utf-8", $s);  }
	if (ord($key) == 0x7f)  # Backspace
	{ 
	   my $s2 = $s;  $s2 =~ s/./ /g;
	   printf("\r%s%s", $prompt, Encode::decode("utf-8", $s2));  STDOUT->flush(); 
	   $s = substr($s, 0, length($s)-1); 
	   printf("\r%s%s", $prompt, Encode::decode("utf-8", $s));  STDOUT->flush(); 
	   next;
	}

	printf("\r%s%s", $prompt, Encode::decode("utf-8", $s));  STDOUT->flush(); 
	$s .= $key;
    }
}

sub read_line
{
    my ($prompt) = @_;
    print "$bgreen$prompt";  STDOUT->flush();
    my $s = "";
    while (1)
    {
	my $key = readkey();
	if ($key eq "\n")
	{  print "$end"; clear_line(); return $s;	}
	if (ord($key) == 0x7f)  # Backspace
	{ 
	   my $s2 = $s;  $s2 =~ s/./ /g;
	   printf("\r%s%s", $prompt, $s2);  STDOUT->flush(); 
	   $s = substr($s, 0, length($s)-1); 
	   printf("\r%s%s", $prompt, $s);  STDOUT->flush(); 
	   next;
	}

	print "$key";  STDOUT->flush();	
	$s .= $key;
    }
}


sub read_key
{
    my $s, $key;
    $key = readkey();  $s = $key;
    if ($key eq "\e")
    {
	$key = readkey();  $s = "Esc$key";
	if ($key eq "[") 
	{
	    $key = readkey();  $s .= $key;
	    if ($key eq "5" || $key eq "6") 
	    {
		$key = readkey();  $s .= $key;
		if ($key eq ";")
		{
		    $key = readkey();  $s .= $key;
		    $key = readkey();  $s .= $key;
		}
	    }
	}
    }

    $s =~ s/Esc\[D/left/;
    $s =~ s/Esc\[C/right/;
    $s =~ s/Esc\[A/up/;
    $s =~ s/Esc\[B/down/;
    $s =~ s/Esc\[5~/pgup/;
    $s =~ s/Esc\[6~/pgdn/;
    $s =~ s/Esc\[5;5~/ctrl_pgup/;
    $s =~ s/Esc\[6;5~/ctrl_pgdn/;
    $s =~ s/\n/enter/;

    return $s;
}

sub check_up
{
     if ($cur < 0) { $cur = 0; }
     if ($cur < $top)
     {
	 $top -= $lines * $width;
	 if ($top < 0) { $top = 0; }
	 read_file();
     }
}

sub check_down
{
    if ($cur >= $top + $lines * $width) 
    {
	$top += $lines * $width;
	read_file();
    }
}

sub search_decode
{
    my ($s) = @_;
    
    if ($search_mode eq "unicode")
    {  return  Encode::decode($encoding, $s);  }
    if ($search_mode eq "hex")
    {  return  unpack("H*", $s);  }
    return $s;
}

sub search_encode
{
    my ($s) = @_;
    
    if ($search_mode eq "unicode")
    {  return  Encode::encode($encoding, $s);  }
    if ($search_mode eq "hex")
    {  return  pack("H*", $s);  }
    return $s;
}

sub sequence_index
{   
    my ($s) = @_;
    my $b;
    
    if (found_sequence($s) == 2)
    {  $b = search_decode(substr($bytes, 1));    }
    else
    {  $b = search_decode($bytes);    }
    
    my $i = index($b, $s, 0);
    if ($search_mode ne "ascii" && $i != -1)  # Find offset in bytes
    {  $i = length(search_encode(substr($b, 0, $i))) + (found_sequence($s) == 2);  }
    return $i;
}


sub found_sequence
{   
    my ($s) = @_;
    
    if ($search_mode eq "ascii")
    {  return ($bytes =~ m/$s/); }

    if ($search_mode eq "hex")
    {  return (search_decode($bytes) =~ m/$s/);   }
    
    # $search_mode: "unicode"
    if (search_decode($bytes) =~ m/$s/)
    {  return 1;  }

    # Try shifting by one byte (needed for utf-16)
    if (search_decode(substr($bytes, 1)) =~ m/$s/)
    {  return 2;  }

    return 0;
}


my $last_search = "";
sub search_forward
{
    my ($s) = @_;
    #printf("\nsearching for '%s'\n", $s);
    if ($s eq "")
    { return; }

    $last_search = $s;

    # Move to current position
    my $old_top = $top;
    $top = $cur + 1;    read_file();

    while (!found_sequence($s))
    {  
	$top += $bsize; 
	if (!read_file())      # Not found, go back to starting point
	{  
	    $status = sprintf("'%s' not found\n", $s);
	    $top = $old_top; read_file(); return; 
	}
    }
    
    my $i = sequence_index($s);
    if ($i == -1)
    { die("Eeek bug, index says not found\n"); }
    else
    {
	$status = sprintf("Found at 0x%08x\n", $top + $i);
	$cur = $top + $i;
	if ($cur > $top + $lines * $width) 
	{
	    $top = $cur;  $top -= $top % 2;
	    read_file();   
	}
    }

    # Keep original position if on the same page
    if ($old_top <= $top && $top < $old_top + $lines * $width)
    {  $top = $old_top;  read_file();    }
}

sub write_string
{
    my ($s) = @_;
    my $off = $cur - $top;
    $bytes = (substr($bytes, 0, $off) . $s .
	      substr($bytes, $off + length($s)));
    write_file();
}

sub change_hex
{
    my $s = read_line("Hex: 0x");
    my $c = chr(eval("0x$s"));
    write_string($c);
}

sub goto_address
{
    my $s = read_line("Goto address: 0x");
    if ($s eq "") { return; }
    $s = eval("0x$s");
    $cur = $top = $s; read_file();
}

my $prev_center_on;
sub center_on
{
    if ($prev_center_on == $cur && $top == $cur - $lines/2 * $width)
    {   $top = $cur;  }					# Top
    elsif ($prev_center_on == $cur && $top == $cur)
    {   $top = $cur - $lines * $width + 1;  }		# Bottom
    else
    {   $top = $cur - $lines/2 * $width;  }		# Center
    
    if ($top < 0) { $top = 0; }
    read_file(); print "$cls"; 
    $prev_center_on = $cur;
}

sub help
{
    print "$cls$green";
    print "\n";
    print "Moving around:\n";
    print "  up down left right  Move cursor\n";
    print "                      Emacs-style keys work too\n";
    print "  pgup pgdn           Scroll up/down one page\n";
    print "  C-pgup C-pgdn       Move up/down 1% of file\n";
    print "  <  >                Move to beginning/end\n";    
    print "  g                   Goto address\n";
    print "\n";
    print "Display:\n";
    print "  a                   Toggle ascii/multibyte display\n";
    print "  m                   Matrix mode\n";
    print "  C-l                 Refresh / Center on current position\n";
    print "\n";
    print "Searching:\n";
    print "  /                   Forward search\n";
    print "  n                   Repeat last search\n";
    print "  U                   Toggle unicode/ascii search\n";
    print "  X                   Set hex search mode\n";
    print "\n";
    print "Editing:\n";
    print "  w                   Write line at current address (ascii)\n";
    print "  x                   Change hex value\n";
    print "\n";
    print "Misc:\n";
    print "  h                   Help\n";
    print "  q                   Quit\n";
    print "\n\n";
    print "[ Any key to continue ]"; STDOUT->flush();

    my $q = read_key();     print "$cls";    
}

#####################################################################


# Clear screen
if ($paint eq "term") { print($cls); }

$status = "[uhexed]  Press 'h' for help";
read_file();
print_page();


while (1)
{
    my $key = read_key();
#    print "\n";
#    printf("key: '%s' 0x%02x\n", $key, ord($key));

    # Move commands
    if ($key eq "left" || $key eq "")
    {  $cur--; check_up();    }
    if ($key eq "up" || $key eq "")
    {  $cur -= $width;  check_up();    }
    if ($key eq "pgup" || $key eq "Escv")
    {  $cur -= $lines * $width;  check_up();    }

    if ($key eq "right" || $key eq "")
    {  $cur++;  check_down(); }
    if ($key eq "down" || $key eq "")
    {  $cur += $width;  check_down(); }
    if ($key eq "pgdn" || $key eq " " || $key eq "")
    {  $cur += $lines * $width;  check_down();    }

    if ($key eq "ctrl_pgdn")
    {  $top += int($file_size / 100); $top += $top % 2;  $cur = $top; read_file(); }
    if ($key eq "ctrl_pgup")
    {  $top -= int($file_size / 100); $top += $top % 2;  if ($top < 0) { $top = 0; } $cur = $top; read_file(); }

    if ($key eq "<")
    {  $cur = $top = 0; read_file(); }
    if ($key eq ">")
    {  $cur = $file_size - 1;	$top = $cur - $lines * $width + 1; read_file();   }

    if ($key eq "g")
    {  goto_address(); }

    # Display commands
    if ($key eq "a")
    {  $encoding = ($encoding eq "ascii" ? $encoding_last : "ascii");  read_file();  }
    if ($key eq "m")
    {  $matrix_mode = !$matrix_mode;  }
    if ($key eq "")
    {  center_on();  }

    # Search commands
    if ($key eq "/")
    { 
	my $s;
	if ($search_mode eq "hex")
	{   $s = read_line("/ 0x");   $s =~ s/ //g;   }
	else
	{   $s = ($search_mode eq "unicode" ? read_line_unicode("/") : read_line("/"));   }
	search_forward($s);
    }
    if ($key eq "n")
    {  search_forward($last_search);  }

    if ($key eq "U")
    {  $search_mode = ($search_mode eq "unicode" ? "ascii" : "unicode");
       $status = sprintf("Search mode: %s\n", $search_mode);    }
    if ($key eq "X")
    {  $search_mode = "hex";  $status = sprintf("Search mode: %s\n", $search_mode);  }

    # Write operations
    if ($key eq "w")
    {  write_string(read_line("write: "));   }

    if ($key eq "x")
    {  change_hex(); }

    # Misc
    if ($key eq "h" || $key eq "?")
    {  help();  }

    if ($key eq "q")
    {  exit 0;  }


    print_page();
}
