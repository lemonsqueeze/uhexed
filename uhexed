#!/usr/bin/perl
use Encode qw(decode encode);
use HotKey;

my $end  =   "\e[0m";
my $inv_video = "\e[7m";


binmode STDOUT, ":utf8";
my $file = $ARGV[0];

open(IN, "< $file") || die "couldn't open $file";
#binmode $fh, ':binary';

#@array = <IN>;

# Buffer size
my $bsize = 8192;

read(IN, $bytes, $bsize);
#print $bytes;
$top = 0;
$cur = 20;

sub to_ascii
{
    my ($c) = @_;
    if (ord($c) >= 32 && ord($c) <= 126)
    {  return $c; }
    return ".";
}

sub to_jap
{
    my ($s) = @_;
    $s = Encode::decode("cp932", $s );    
    $s =~ s/[\t\n\r\0]/./g;
    return $s;
}

$width = 28;
$lines = 25;
sub print_page
{
    printf("\n\n\n\n\n");
    for (my $i = 0; $i < $lines; $i++)
    {
	printf("%05x ", $top + $i*$width);

	# Regular hex dump
	for (my $j = 0; $j < $width; $j++)
	{
	    my $p = $top + $i*$width + $j;
	    print("$inv_video") if ($p == $cur);
	    printf("%02x", ord(substr($bytes, $p, 1)) );
	    print("$end") if ($p == $cur);
	    printf(" ") if (($j+1) % 4 == 0);		
	}

	# ascii/multi-byte characters
	printf("    ");
	my $line = $top + $i * $width;
	if ($line <= $cur && $cur < $line + $width)	# Highlight character at cursor
	{
	    my $off = $line;
	    my $split = $cur;
	    my $len = 1;

	    # Don't split multi-byte characters !
	    if (length(to_jap(substr($bytes, $line, $cur - $line))) == 
		length(to_jap(substr($bytes, $line, $cur - $line + 1))))
	    {  $len++;   }		# multi-byte char at cursor

	    if (($cur - $line) &&
		length(to_jap(substr($bytes, $line, $cur - $line))) == 
		length(to_jap(substr($bytes, $line, $cur - $line - 1))))
	    {  $len++; $split--;  }	# multi-byte char starts before cursor
	    
	    my $s = to_jap(substr($bytes, $off, $split - $line));	    
	    printf("%s%s", $s, $inv_video);
	    $off += $split - $line;
	    
	    my $s = to_jap(substr($bytes, $off, $len));
	    printf("%s%s", $s, $end);
	    $off += $len;

	    my $s = to_jap(substr($bytes, $off, $width - $len - ($split - $line)));
	    printf("%s", $s);
	}
	else 
	{ 
	    my $s = to_jap(substr($bytes, $line, $width));
	    printf("%s", $s);
	}
	printf("\n");
    }
}


sub read_key
{
    my $s, $key;
    $key = readkey();   
    $s = $key;
    if ($key eq "\e")
    {
	$key = readkey();
	$s = "Esc$key";
	if ($key eq "[") 
	{
	    $key = readkey();
	    $s .= $key;
	    if ($key eq "5" || $key eq "6") 
	    {
		$key = readkey();
		$s .= $key;
	    }
	}
    }

    $s =~ s/Esc\[D/left/;
    $s =~ s/Esc\[C/right/;
    $s =~ s/Esc\[A/up/;
    $s =~ s/Esc\[B/down/;
    $s =~ s/Esc\[5~/pgup/;
    $s =~ s/Esc\[6~/pgdn/;
    $s =~ s/\n/enter/;

    return $s;
}

print_page();

sub check_up
{
     if ($cur < 0) { $cur = 0; }
     if ($cur < $top)
     {
	 $top -= $lines * $width;
	 if ($top < 0) { $top = 0; }
	 read(IN, $bytes, $bsize, $top);
     }
}

sub check_down
{
    if ($cur > $top + $lines * $width) 
    {
	$top += $lines * $width;
	read(IN, $bytes, $bsize, $top);
    }
}

while (1)
{
    my $key = read_key();
    print "\n";
#    printf("key: %s\n", $key);

    if ($key eq "left")
    {  $cur--; check_up();    }
    if ($key eq "up")
    {  $cur -= $width;  check_up();    }

    if ($key eq "right")
    {  $cur++;  check_down(); }
    if ($key eq "down")
    {  $cur += $width;  check_down(); }

    print_page();
}
